* Setup Breadcrumbs
#+BEGIN_QUOTE
well, how did i get here...
#+END_QUOTE
** Todo
*** Blockers
**** TODO Rename webpack config stuff (remove example naming)
**** TODO Final polish/refactor on server.py -- move more query stuff to models
**** TODO Possible extra component extraction under event_item
**** DONE vagrant setup
**** DONE Bulk query for event associations (location and attendees)
**** DONE Parameterize API url in frontend
**** DONE more styling
**** DONE Make attendee count pull from attendees rather than static attribute
**** DONE pagination on locations index
**** DONE Pagination on events index
**** DONE sort events in chronological order
**** DONE Un-RSVP from an event
**** DONE Handle unique RSVPs (by name and email)
**** DONE choose and add additional attributes to events index
**** DONE add more detailed attrs to event show?
**** DONE Sort out event detail collapse / expand
**** DONE User "sign in" -- entering details to localstorage?
**** DONE Marking an event as attending??
** VirtualBox Setup
Install from apt repository

#+BEGIN_EXAMPLE
wget -q https://www.virtualbox.org/download/oracle_vbox.asc -O- | sudo apt-key add -
sudo apt-get update
sudo apt-get install virtualbox-5.1
#+END_EXAMPLE

** Postgres Setup (ubuntu desktop)
#+BEGIN_EXAMPLE
sudo su - postgres
psql
postgres=# create role "worace" LOGIN SUPERUSER;
...
createdb (from user account)
#+END_EXAMPLE

** Importing the PG Dump
#+BEGIN_EXAMPLE
createdb hfa_events
psql hfa_events < assignment/data.pgdump
#+END_EXAMPLE
** VirtualEnv
Isolates pip dependencies for the given project; seems to be good practice

#+BEGIN_EXAMPLE
pip install --user virtualenv
virtualenv env
# to activate the env:
source env/bin/activate
#+END_EXAMPLE

Then pip packages will install locally, and you can check the current environment:

#+BEGIN_EXAMPLE
pip install nose
pip freeze

# save env in requirements doc...
pip freeze > requirements.txt
#+END_EXAMPLE

** Postgres SQLAlchemy Setup
Ubuntu needs some native extensions for these drivers:
#+BEGIN_EXAMPLE
sudo apt-get install python-psycopg2 libpq-dev
pip install psycopg2
#+END_EXAMPLE
** Table Schemas
*** Events
#+BEGIN_EXAMPLE
    id (Integer)
    status (String)
    start_date (DateTime)
    end_date (DateTime)
    description (String)
    official (Boolean)
    visibility (String)
    guests_can_invite_others (Boolean)
    modified_date (DateTime)
    created_date (DateTime)
    participant_count (Numeric)
    reason_for_private (String)
    order_email_template (String)
    name (String)
    locations = (Location)
#+END_EXAMPLE
*** Locations
Locations:
#+BEGIN_EXAMPLE
	id (Integer)
    event_id (Integer, links to parent event's id)

    address_type (String)
    contact_phone (String)
    primary (Boolean)
    contact_email (String)
    contact_family_name (String)
    contact_given_name (String)
    host_given_name (String)
    timezone (String)
    city (String)
    locality (String)
    state (String)
    address_type (String)
    latitude (String)
    longitude (String)
    accuracy (String)
    address1 (String)
    address2 (String)
    postal_code (String)
    country (String)
    modified_date (DateTime)
    created_date (DateTime)
    number_spaces_remaining (Numeric)
    spaces_remaining (Boolean)
    name (String)
#+END_EXAMPLE
** Interactive Debugger
#+BEGIN_SRC python
# handy snippet to give pry-like interface...
import code; code.interact(local=dict(globals(), **locals()))
#+END_SRC
